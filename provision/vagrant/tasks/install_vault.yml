---
- name: Define Vault version, root token, and listener address
  set_fact:
    vault_version: "1.16.0"
    vault_root_token: "root"
    vault_vm_ip: "192.168.1.10"  # Replace with your VM's public IP
    vault_listener_address: "192.168.1.10:8200"

- name: Check if Vault CLI is installed
  command: vault --version
  register: vault_check
  failed_when: false
  changed_when: false

- name: Ensure unzip is installed
  apt:
    name: unzip
    state: present
  when: ansible_os_family == "Debian"

- name: Download Vault CLI binary
  get_url:
    url: "https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_linux_amd64.zip"
    dest: "/tmp/vault_{{ vault_version }}.zip"
    mode: '0644'
  when: "'Vault v' + vault_version not in (vault_check.stdout | default(''))"

- name: Unzip Vault CLI binary
  unarchive:
    src: "/tmp/vault_{{ vault_version }}.zip"
    dest: "/usr/local/bin/"
    remote_src: yes
  when: "'Vault v' + vault_version not in (vault_check.stdout | default(''))"

- name: Ensure Vault CLI binary is executable
  file:
    path: "/usr/local/bin/vault"
    mode: '0755'
  when: "'Vault v' + vault_version not in (vault_check.stdout | default(''))"

- name: Start Vault server in dev mode
  shell: |
    nohup vault server -dev \
      -dev-root-token-id="{{ vault_root_token }}" \
      -dev-listen-address="{{ vault_listener_address }}" \
      -log-level=trace > /tmp/vault.log 2>&1 &
  args:
    executable: /bin/bash
  environment:
    VAULT_DEV_ROOT_TOKEN_ID: "{{ vault_root_token }}"
  register: vault_process
  changed_when: false

- name: Install required packages for Vault (if not already installed)
  apt:
    name:
      - curl
      - unzip
    state: present
  become: true

- name: Check if Vault is running
  shell: netstat -tuln | grep 8200
  register: vault_listener_check
  changed_when: false

- name: Debug Vault listener details
  debug:
    msg: "Vault listener details: {{ vault_listener_check.stdout }}"

- name: Ensure Vault server is accessible
  uri:
    url: "http://{{ vault_listener_address }}/v1/sys/health"
    method: GET
    return_content: yes
    status_code: 200
  retries: 30
  delay: 5
  register: vault_health_check

- name: Debug Vault health check
  debug:
    msg: "Vault health status: {{ vault_health_check.content }}"

# - name: Create Kubernetes service for Vault
#   copy:
#     dest: /tmp/vault-service.yaml
#     content: |
#       apiVersion: v1
#       kind: Service
#       metadata:
#         name: vault
#         namespace: default
#       spec:
#         type: ExternalName
#         externalName: "{{ vault_vm_ip }}"
#         ports:
#         - port: 8200
#           targetPort: 8200
#     mode: '0644'

# - name: Apply Kubernetes service for Vault
#   shell: kubectl apply -f /tmp/vault-service.yaml
#   args:
#     executable: /bin/bash
